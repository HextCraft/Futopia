buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
	}
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
	// Load config. It shall from now be referenced as simply config or project.config
	def prop = new Properties()
	prop.load(it)
	project.ext.config = new ConfigSlurper().parse prop
}

version = "${config.major_version}.${config.minor_version}.${config.build_number}"
group = "net.thegaminghuskymc.futopia"
archivesBaseName = config.mod_name

targetCompatibility = "1.8"
sourceCompatibility = "1.8"

repositories {
	maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://tehnut.info/maven"
    }
    maven { // JEI
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven { // IntWheel
        url "http://maven.k-4u.nl"
    }
    maven { // TOP
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }
    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }
}

dependencies {
    deobfCompile "mcp.mobius.waila:Hwyla:${config.hwyla_version}_${config.mc_version}:api"
    deobfCompile "mcjty.theoneprobe:TheOneProbe-1.12:${config.mc_version}_${config.top_version}-${config.top_suffix}"
    compile "cofh:RedstoneFlux:${config.mc_version}-${config.rf_version}:deobf"
    compile "cofh:CoFHCore:${config.mc_version}-${config.cofh_core_version}:deobf"
    compile "codechicken:CodeChickenLib:${config.mc_version}-${config.ccl_version}:deobf"
    compile "mezz.jei:jei_${config.mc_version}:${config.jei_version}"
}

minecraft {
	version = config.mc_version + "-" + config.forge_version
	mappings = config.mappings
	runDir = "run"
	replace '${mod_version}', project.config.mod_version
	makeObfSourceJar = false
}

processResources {
	inputs.property "version", project.version
	inputs.property "mc_version", project.config.mc_version

	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand 'version': project.version, 'mc_version': project.config.mc_version
	}

	from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
	classifier = 'universal'
}

task deobfJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'deobf'
}

task srcJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

// Tell artifact system about extra jars.
artifacts {
	archives deobfJar
	archives srcJar
}